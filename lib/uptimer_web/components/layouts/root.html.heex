<!DOCTYPE html>
<html lang="en" class="light">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="csrf-token" content={get_csrf_token()} />
    <.live_title default="Uptimer">
      {assigns[:page_title]}
    </.live_title>
    <link phx-track-static rel="stylesheet" href={~p"/assets/app.css"} />
    <script defer phx-track-static type="text/javascript" src={~p"/assets/app.js"}>
    </script>
  </head>
  <body class="bg-gray-100 dark:bg-gray-900 transition-colors duration-200">
    {@inner_content}

    <script>
      // Dark mode functionality
      const darkModeToggle = document.getElementById('dark-mode-toggle');
      const html = document.documentElement;

      // Check for saved theme preference or use system preference
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        html.classList.add('dark');
      } else {
        html.classList.remove('dark');
      }

      // Toggle dark mode
      darkModeToggle.addEventListener('click', () => {
        html.classList.toggle('dark');
        localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
      });

      // Timer functionality
      let seconds = 10;
      let timerPaused = false;
      const timerElement = document.getElementById('timer');
      const timerMobileElement = document.getElementById('timer-mobile');

      function updateTimer() {
        if (timerPaused) return;
        
        if (timerElement) timerElement.textContent = seconds;
        if (timerMobileElement) timerMobileElement.textContent = seconds;
        
        if (seconds <= 0) {
          // Reset timer and refresh website previews
          seconds = 10;
          refreshWebsites();
        } else {
          seconds--;
        }
      }

      // Initial call and set interval
      updateTimer();
      setInterval(updateTimer, 1000);

      function refreshWebsites() {
        // This is just a placeholder - actual implementation is in app.js
        if (window.refreshAllWebsites) {
          window.refreshAllWebsites();
        }
      }

      // Function to check if website form is visible
      function isWebsiteFormVisible() {
        const form = document.getElementById('website-form');
        return form && window.getComputedStyle(form).display !== 'none';
      }

      // Function to pause timer
      function pauseTimer() {
        timerPaused = true;
        if (timerElement) timerElement.parentNode.classList.add('opacity-50');
        if (timerMobileElement) timerMobileElement.parentNode.classList.add('opacity-50');
      }

      // Function to resume timer
      function resumeTimer() {
        timerPaused = false;
        if (timerElement) timerElement.parentNode.classList.remove('opacity-50');
        if (timerMobileElement) timerMobileElement.parentNode.classList.remove('opacity-50');
      }

      // Add event listeners for LiveView events
      window.addEventListener('phx:show', function(e) {
        if (e.target.id === 'website-form') {
          pauseTimer();
        }
      });

      window.addEventListener('phx:hide', function(e) {
        if (e.target.id === 'website-form') {
          resumeTimer();
        }
      });

      // Handle direct DOM clicks
      document.addEventListener('click', function(e) {
        // When add card is clicked
        if (e.target.closest('#add-card') && !isWebsiteFormVisible()) {
          pauseTimer();
        }
        
        // When cancel button is clicked
        if (e.target.matches('button[type="button"]') && 
            e.target.closest('#website-form') && 
            e.target.textContent.trim() === 'Cancel') {
          resumeTimer();
        }
        
        // When clicking outside the form (to close it)
        if (!e.target.closest('#website-form') && 
            !e.target.closest('#add-card') && 
            isWebsiteFormVisible()) {
          resumeTimer();
        }
      });

      // Listen for form submission to resume timer
      document.addEventListener('submit', function(e) {
        if (e.target.closest('#website-form')) {
          resumeTimer();
        }
      });

      // Set up MutationObserver to watch for form visibility changes
      const websitesGrid = document.getElementById('websites-grid');
      const addCard = document.getElementById('add-card');

      function setupObserver(element) {
        if (!element) return;
        
        const observer = new MutationObserver(function(mutations) {
          mutations.forEach(function() {
            const form = document.getElementById('website-form');
            if (form) {
              if (window.getComputedStyle(form).display !== 'none') {
                pauseTimer();
              } else {
                resumeTimer();
              }
            }
          });
        });
        
        observer.observe(element, { 
          attributes: true, 
          childList: true, 
          subtree: true,
          attributeFilter: ['style', 'class'] 
        });
      }

      // Observe both the grid and the add card
      setupObserver(websitesGrid);
      setupObserver(addCard);

      // Initial check on page load
      document.addEventListener('DOMContentLoaded', function() {
        if (isWebsiteFormVisible()) {
          pauseTimer();
        } else {
          resumeTimer();
        }
      });
    </script>
  </body>
</html>
