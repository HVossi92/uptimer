<!DOCTYPE html>
<html lang="en" class="light">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="csrf-token" content={get_csrf_token()} />
    <.live_title default="Uptimer">
      {assigns[:page_title]}
    </.live_title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        darkMode: 'class',
        theme: {
          extend: {
            colors: {
              gray: {
                750: '#2D3748', // Custom shade for dark mode card footers
              }
            }
          }
        }
      }
    </script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link phx-track-static rel="stylesheet" href={~p"/assets/app.css"} />
    <script defer phx-track-static type="text/javascript" src={~p"/assets/app.js"}>
    </script>
  </head>
  <body class="bg-gray-100 dark:bg-gray-900 transition-colors duration-200 min-h-screen flex flex-col">
    <!-- Fixed Header -->
    <header class="bg-white dark:bg-gray-800 shadow-md py-4 px-6 sticky top-0 z-10">
      <div class="container mx-auto flex justify-between items-center">
        <div class="flex items-center">
          <div class="bg-blue-600 text-white p-2 rounded-lg mr-3">
            <i class="fas fa-chart-line text-xl"></i>
          </div>
          <h1 class="text-2xl font-bold text-gray-800 dark:text-white">Uptimer</h1>
        </div>
        <div class="flex items-center">
          <!-- User Authentication -->
          <ul class="flex items-center gap-4 px-4 sm:px-6 lg:px-8">
            <%= if @current_user do %>
              <li class="flex items-center text-sm text-gray-600 dark:text-gray-300">
                <span class="mr-2"><i class="fas fa-user"></i></span>
                {@current_user.email}
              </li>
              <li>
                <.link
                  href={~p"/users/settings"}
                  class="text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400"
                >
                  <span class="mr-1"><i class="fas fa-cog"></i></span> Settings
                </.link>
              </li>
              <li>
                <.link
                  href={~p"/users/log_out"}
                  method="delete"
                  class="text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400"
                >
                  <span class="mr-1"><i class="fas fa-sign-out-alt"></i></span> Log out
                </.link>
              </li>
            <% else %>
              <li>
                <.link
                  href={~p"/users/register"}
                  class="text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400"
                >
                  <span class="mr-1"><i class="fas fa-user-plus"></i></span> Register
                </.link>
              </li>
              <li>
                <.link
                  href={~p"/users/log_in"}
                  class="text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400"
                >
                  <span class="mr-1"><i class="fas fa-sign-in-alt"></i></span> Log in
                </.link>
              </li>
            <% end %>
          </ul>
          
          <!-- Dark Mode Toggle -->
          <button id="dark-mode-toggle"
            class="p-2 rounded-lg bg-gray-200 dark:bg-gray-700 mr-4 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
            <i class="fas fa-sun text-yellow-500 dark:hidden"></i>
            <i class="fas fa-moon text-blue-300 hidden dark:block"></i>
          </button>
          
          <!-- Timer -->
          <div class="bg-gray-100 dark:bg-gray-700 rounded-lg shadow p-3 flex items-center">
            <span class="text-gray-600 dark:text-gray-300 mr-2">Next refresh in:</span>
            <span id="timer" class="text-blue-600 dark:text-blue-400 font-bold">5</span>
            <span class="text-gray-600 dark:text-gray-300 ml-1">seconds</span>
          </div>
        </div>
      </div>
    </header>

    {@inner_content}

    <!-- Footer -->
    <footer class="bg-white dark:bg-gray-800 shadow-inner py-6 mt-8">
      <div class="container mx-auto px-6">
        <div class="flex flex-col md:flex-row justify-between items-center">
          <div class="mb-4 md:mb-0">
            <p class="text-sm text-gray-600 dark:text-gray-400">&copy; 2025 Uptimer. All rights reserved.</p>
          </div>
          <div class="flex space-x-4">
            <a href="#" class="text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400">
              <i class="fas fa-question-circle mr-1"></i>
              <span>Help</span>
            </a>
            <a href={~p"/users/settings"} class="text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400">
              <i class="fas fa-cog mr-1"></i>
              <span>Settings</span>
            </a>
            <a href="#" class="text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400">
              <i class="fas fa-code mr-1"></i>
              <span>API</span>
            </a>
          </div>
          <div class="mt-4 md:mt-0">
            <span class="text-xs text-gray-500 dark:text-gray-400">Version 1.0.0</span>
          </div>
        </div>
      </div>
    </footer>

    <script>
      // Dark mode functionality
      const darkModeToggle = document.getElementById('dark-mode-toggle');
      const html = document.documentElement;

      // Check for saved theme preference or use system preference
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        html.classList.add('dark');
      } else {
        html.classList.remove('dark');
      }

      // Toggle dark mode
      darkModeToggle.addEventListener('click', () => {
        html.classList.toggle('dark');
        localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
      });

      // Timer functionality
      let seconds = 5;
      const timerElement = document.getElementById('timer');

      function updateTimer() {
        timerElement.textContent = seconds;
        if (seconds <= 0) {
          // Reset timer and refresh website previews
          seconds = 5;
          refreshWebsites();
        } else {
          seconds--;
        }
      }

      // Initial call and set interval
      updateTimer();
      setInterval(updateTimer, 1000);

      function refreshWebsites() {
        // In a real implementation, this would update the iframes or fetch new status
        console.log('Refreshing websites...');
        // For demo purposes, we'll just log this
        document.querySelectorAll('.bg-gray-50.dark\\:bg-gray-750, .bg-gray-50, .dark\\:bg-gray-750').forEach(el => {
          const statusElement = el.querySelector('.text-xs');
          if (statusElement) {
            statusElement.textContent = 'Last checked: Just now';
          }
        });
      }
    </script>
  </body>
</html>
